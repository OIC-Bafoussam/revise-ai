import type { HttpContextContract } from '@ioc:Adonis/Core/HttpContext'
import fs from 'fs'
import path from 'path'

export default class SummaryController {
  public async generate({ request, response }: HttpContextContract) {
    try {
      // 1. R√©cup√©ration du nom du fichier
      const fileName = request.input('fileName')
      if (!fileName) {
        return response.badRequest({ error: 'Nom du fichier manquant' })
      }

      // 2. V√©rifier et lire le fichier
      const filePath = path.join(__dirname, '../../../public/uploads', fileName)
      if (!fs.existsSync(filePath)) {
        return response.notFound({ error: 'Fichier introuvable' })
      }

      const fileContent = fs.readFileSync(filePath, 'utf-8')

      // 3. G√©n√©ration du r√©sum√© (simulation pour l‚Äôinstant)
      const summary = `
        Voici un r√©sum√© g√©n√©r√© automatiquement :
        - Le document parle d'intelligence artificielle et de ses applications.
        - L'IA peut aider dans l'√©ducation en g√©n√©rant quiz, r√©sum√©s et flashcards.
        - Les enseignants peuvent personnaliser les supports.
        - Les apprenants b√©n√©ficient de recommandations adapt√©es.
      `

      // üëâ Plus tard : remplacer ce bloc par un vrai appel √† un mod√®le IA pour r√©sumer `fileContent`

      return response.json({
        message: 'R√©sum√© g√©n√©r√© avec succ√®s ‚úÖ',
        file: fileName,
        summary: summary.trim(),
      })
    } catch (error) {
      return response.status(500).json({ error: 'Erreur lors de la g√©n√©ration du r√©sum√©', details: error.message })
    }
  }
}
